

What it did:
- It accidentally taught me Python, I intended to let chat-gpt do all the work which it for 90% did, however, while copy pasting code snippets back and forth, you keep on getting feedback. For some 5% of the cases I felt it would be easier to code a few basics down myself. For another 5% this was absolute necessity as Open AI kept misunderstanding: Mostly when dealing with relative positioning (player position on screen vs world map)
- It taught me the current (Summer - 2024) potential of openAI. I was literally blew me away. Although there is a clear limitation on context, for most of the business requests I've been conducting professionally, the current state of OpenAI's chatgpt 4.0 is more than capable to resolve the majority of the changes under supervision. Especially for green-field implementations.
- I learned how to build a game without an editor. I couldn't find an editor which would allow me to generate a game without requiring the editor itself. Was hoping to learn Gadot, Unreal or Unity, but neither of them gave me this option. 
- I learned how to integrate stable diffusion, and LLM's into an application for both generative and validative (word?) purposes.


What it does:
- It generates a new map on every new run (Rogue lite).
- It hosts a common area where player can converse in natural language with NPC through local hosted LLM.
- It generates characters with their own set of guns (Stable diffusion), their own personality (LLM), their own backstory (LLM), their own set of props (SD), specialization inspired on a finite given list (Configurable).
- It strips SD outcomes of its background which helps generate game sprites
- It allows players to buy and upgrade guns from NPC's. Each gun has its own bullets, splashes, damage, shooting_speed, ... what not
- It allows player and NPC's to battle each other where NPC's are notoriously good at dodging player's bullets
- It generates similar images of the same NPC in different states. 
- Traps are causing the player difficulties to progress through a map.


It doesn't yet:
- generate a story linking all NPC's together. Although it totally could, context limitations form a bottle neck, especially on local hosted LLM's. This is a matter of time to resolve itself though.
- It doesn't really have a proper game definition: The goal of the game is to ... You can just blast NPC's with water balloons and chat with them about whatever you like while shopping for guns. 
- There is no clear arena end - i.e. go to next level when all enemies are dead... 
- optimized code: with the current context limitations, it's for OpenAI impossible to prevent code duplication as soon as your codebase grows above limits (32k tokens)


What it won't do
- Although NPC's are automatically generated, they all consist of 3 body parts (legs, body, head). It's not smart enough to generate a dragon for instance. It does not yet generate other types of enemies. This largely fails on animation. Input for animation images with current game entities is a grayscale blueprint of legs, body and face, which then gets decorated by SD. I have not found a solution to create input for an unknown type of enemy. It's not impossible, but I forsee very large chance for failure too many times. 
- NPC's get generated, however, a pair of legs is build on SD calls. Throughout the walking pattern, he'll have as many different pairs of pants as there are frames in the animation. This doesn't seem too much of the problem given the size of other areas of improvement :)
- It doesn't generate new weapon types (causes too much chaos in generation). Already in current implementation, guns sometimes point downwards (5%) and it's hard to filter out these occurences. Similarly gun handles occasionally get positioned on the wrong side of the gun which appears a bit odd if you look closely. 
- It does not generate game policies (evade a bullet every x seconds, run away after health < 10%
- Generate safe content. Although heavily dependent on what you're feeding it, both SD and LLM's are to be treated with care. My intend was to get a fully automatically generated game without having to manually test it.